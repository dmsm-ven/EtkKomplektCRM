@using EtkBlazorApp.DataAccess.Entity.Manufacturer
@using EtkBlazorApp.DataAccess.Repositories
@inject IStockStorage stockStorage
@inject ISettingStorageReader settingsReader
@inject IMarketplaceExportService marketplaceService

<div>
<h2>@Title</h2>
<p style="line-height: 20px;">
    <a href="@CabinetURL" target="_blank" style="font-size: 11px;">Перейти в личный кабинет маркетплейса</a>
    <span class="float-right" style="font-size: 11px; color: lightgray;">Последний запрос: @feedFileLastRequestDateTime</span>
</p>


@if (exportInfo != null)
{
    <div class="border" style="background: #f8f9fa; border-radius: 4px;">
        <table class="table table-borderless">
            <thead>
                <tr>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="AddNewExportInfo">
                            <span class="oi oi-plus"></span>
                        </button>
                    </td>
                    <td colspan="3">
                        <SelectManufacturerDropdown @bind-Manufacturer="newManufacturer" 
                            DisabledManufacturers="@exportInfo.Select(i => new ManufacturerEntity(){ manufacturer_id = i.manufacturer_id}).ToList()" />
                    </td>
                </tr>
                <tr>
                    <th>Бренд</th>
                    <th>Наценка</th>
                    <th>Выгружаемые склады</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in exportInfo)
                {
                    <tr>
                        <td>
                            @item.manufacturer_name
                        </td>

                        <td>
                            <input style="width: 70px; font-size: 12px;" type="number" class="form-control" 
                            value="@item.discount"
                            @onchange="@(async e => { item.discount = int.Parse(e.Value.ToString()); await StockInfoChanged(item); })" />
                        </td>
                        <td>
                            <StocksCheckListBoxNew 
                                           StocksWithProduct="@ListStocksForManufacturerById(item.manufacturer_id)"
                                           CheckedStocks="item.checked_stocks_list"
                                           CheckedStocksChanging="@(e => StockInfoChanged(item))" />
                        </td>
                        <td>
                            <div class="dropdown">
                                  <button class="btn btn-outline">
                                      <span class="dots-style">...</span>
                                    </button>
                                  <div class="dropdown-content" style="cursor: pointer;">
                                    <a @onclick=@(e => RemoveExportInfo(item))>
                                        @($"Удалить '{item.manufacturer_name}' из выгрузки в '{Marketplace}'")
                                    </a>
                                  </div>
                                </div>                           
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <p><a href="@FeedURL" class="marketplace-feed-uri-small">@FeedURL</a></p>
}
</div>

@code {
    List<StockPartnerEntity> allStocks;
    List<MarketplaceBrandExportEntity> exportInfo;
    Dictionary<int, List<StockPartnerEntity>> stocksWithProductsForManufacturer;
    ManufacturerEntity newManufacturer;
    string feedFileLastRequestDateTime;

    [Parameter] public string Marketplace { get; set; }
    [Parameter] public string CabinetURL { get; set; }
    [Parameter] public string FeedURL { get; set; }
    [Parameter] public string Title { get; set; }


    protected override async Task OnInitializedAsync()
    {
        string settings_key = Regex.Replace(Marketplace, "([A-Z])", "_$1").ToLower().TrimStart('_') + "_last_request";
        //будет вида ozon_seller_last_request

        feedFileLastRequestDateTime = (await settingsReader.GetValue<DateTime>(settings_key)).ToString("dd.MM.yyyy HH:mm");

        allStocks = await stockStorage.GetStocks();
        exportInfo = await marketplaceService.GetAllForMarketplace(Marketplace);

        stocksWithProductsForManufacturer = exportInfo.ToDictionary(i => i.manufacturer_id, i => new List<StockPartnerEntity>());

        foreach (var ei in exportInfo)
        {
            foreach (var s in ei.checked_stocks_list)
            {
                s.name = allStocks.FirstOrDefault(stock => stock.stock_partner_id == s.stock_partner_id)?.name ?? string.Empty;
            }
        }

        newManufacturer = new ManufacturerEntity();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var source = await stockStorage.GetManufacturersAvailableStocks();
            if (source != null && allStocks != null)
            {
                stocksWithProductsForManufacturer = source
                .Where(i => !string.IsNullOrWhiteSpace(i.stock_ids))
                    .ToDictionary(
                        i => i.manufacturer_id,
                        j => allStocks.Where(s => j.stock_ids.Split(",").Contains(s.stock_partner_id.ToString())).ToList());
                StateHasChanged();
            }
        }
    }

    private List<StockPartnerEntity> ListStocksForManufacturerById(int manufacturer_id)
    {
        if (stocksWithProductsForManufacturer.ContainsKey(manufacturer_id))
        {
            return stocksWithProductsForManufacturer[manufacturer_id];
        }
        return allStocks;
    }

    public async Task RemoveExportInfo(MarketplaceBrandExportEntity itemToRemove)
    {
        await marketplaceService.Remove(Marketplace, itemToRemove.manufacturer_id);
        exportInfo.Remove(itemToRemove);
    }

    private async Task AddNewExportInfo()
    {
        var newItem = new MarketplaceBrandExportEntity()
        {
            manufacturer_id = newManufacturer.manufacturer_id,
            manufacturer_name = newManufacturer.name,
        };

        await marketplaceService.AddOrUpdate(Marketplace, newItem);

        exportInfo.Add(newItem);
        newManufacturer = new ManufacturerEntity();
        StateHasChanged();
    }

    private async Task StockInfoChanged(MarketplaceBrandExportEntity changedItem)
    {
        await marketplaceService.AddOrUpdate(Marketplace, changedItem);
    }
}
