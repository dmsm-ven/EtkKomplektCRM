@inject IToastService toastService
@inject NewOrdersNotificationService notificationService
@implements IDisposable

@code {
    [Parameter] public EventCallback<Order> NewOrderPushed { get; set; }

    protected override void OnInitialized()
    {
        notificationService.OnNewOrderFound += NewOrderFound;
    }

    private void NewOrderFound(OrderEntity entity)
    {
        throw new NotImplementedException();

        /*var order = new Order()
            {
                City = entity.payment_city,
                Customer = HttpUtility.HtmlDecode(entity.payment_firstname),
                DateTime = entity.date_added,
                OrderId = entity.order_id,
                TotalPrice = entity.total
            };
        InvokeAsync(async () => await NewOrderPushed.InvokeAsync(order)); */
    }

    public void Dispose()
    {
        notificationService.OnNewOrderFound -= NewOrderFound;
    }
}
