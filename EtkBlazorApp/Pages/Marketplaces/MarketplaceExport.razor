@page "/marketplace-export"
@using EtkBlazorApp.DataAccess.Repositories
@using Humanizer
@attribute [Authorize(Roles = "Administrator, Manager")]

<div class="container-fluid">
       <div class="col-md-12">
           <div class="row">
            @foreach (var tab in tabs)
            {
                <div class="marketplace-tab-item @(SelectedTab == tab ? "active" : "")" @onclick="@(e => SelectedTab = tab)">
                    @if (tab != tabs.Last())
                    {
                        <img src="/image/logotips/marketplaces/@tab-logo.png" style="width: 200px; height: 100px;" />
                    }
                    else
                    {
                        <span style="display: block;bottom: 32px;position: absolute;">@tab</span>
                    }
                </div>
            }
        </div>     
    </div>
    <div id="marketplace-tab-content" class="col-md-8 offset-2">
        @if(SelectedTab == "OzonSeller")
        {
            <MarketplaceBrandsExportTable Marketplace="OzonSeller"   
            Title="Настройки выгрузки Ozon Seller"
            CabinetURL="https://seller.ozon.ru/app/main"
            FeedURL="https://etk-komplekt.ru/index.php?route=feed/ozon_seller">
            </MarketplaceBrandsExportTable>
        }
        else if(SelectedTab == "YandexMarket")
        {
            <MarketplaceBrandsExportTable Marketplace="YandexMarket" 
            Title="Настройки выгрузки Yandex Market"
            CabinetURL="https://partner.market.yandex.ru/business/892602/marketplace"
            FeedURL="https://etk-komplekt.ru/index.php?route=feed/yandex_yml&token=DA000001A17164D2;https://etk-komplekt.ru/index.php?route=feed/yandex_yml/asJsonMainInfoOnly">
            </MarketplaceBrandsExportTable>
        }
        else if (SelectedTab == "Sbermegamarket")
        {
            <MarketplaceBrandsExportTable Marketplace="Sbermegamarket"
            Title="Настройки выгрузки Sbermegamarket"
            CabinetURL="https://partner.sbermegamarket.ru/home"
            FeedURL="https://etk-komplekt.ru/index.php?route=feed/sbermegamarket_yml&token=D7C6CD2F-94B4-447E-B358-44D2B51787F4">
            </MarketplaceBrandsExportTable>
        }
        else if (SelectedTab == "Wildberries")
        {
            <MarketplaceBrandsExportTable Marketplace="Wildberries"
            Title="Настройки выгрузки Wildberries"
            CabinetURL="https://seller.wildberries.ru"
            FeedURL="https://lk.etk-komplekt.ru/marketplace-export/wildberries-feed">                
            </MarketplaceBrandsExportTable>
            <button class="btn btn-primary" disabled=@wbUpdateInProgress
            @onclick="UpdateWildberriesStockAndPrice">
                Синхронизировать цены/остатки сейчас
            </button>
        }
    </div>
    <div class="col-md-12">
        @if(SelectedTab == "Сводная таблица")
        {
            <MarketplacePivotTable />
        }
    </div>
</div>

@code {
    static string[] tabs = new[] { "Wildberries", "OzonSeller", "YandexMarket", "Sbermegamarket", "Сводная таблица" };

    [Inject] public IToastService toasts { get; set; }

    [Inject] public ISettingStorageReader settingsReader { get; set; }

    [Inject] public ISettingStorageWriter settingsWrite { get; set; }

    [Inject] public IMarketplaceExportService marketplaceExport { get; set; }

    [Inject] public WildberriesUpdateService wbUpdateService { get; set; }

    public string SelectedTab { get; set; } = tabs[0];

    private bool wbUpdateInProgress = false;

    private bool wbToggleState = false;

    protected override async Task OnInitializedAsync()
    {
        wbToggleState = await settingsReader.GetValue<bool>("wildberries-enabled");
    }

    private async Task SetWildberriesState()
    {
        wbToggleState = !wbToggleState;

        await settingsWrite.SetValue("wildberries-enabled", wbToggleState);
    }

    private async Task UpdateWildberriesStockAndPrice()
    {
        wbUpdateInProgress = true;
        StateHasChanged();
        try
        {
            toasts.ShowInfo($"{DateTime.Now} Запуск обновления");

            var toastsIndicator = new Progress<string>((msg) =>
            {
                toasts.ShowInfo($"{DateTime.Now} {msg}");
            });

            await wbUpdateService.UpdateWildberriesProducts(forced: true, toastsIndicator);

            toasts.ShowSuccess("Обновление товаров на Wildberries выполнено");
        }
        catch(Exception ex)
        {
            toasts.ShowError("Не удалось выполнить обновление товаров Wildberries. " + ex.Message);
        }
        finally
        {
            wbUpdateInProgress = false;
            StateHasChanged();
        }
    }
}