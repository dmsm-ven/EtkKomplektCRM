@page "/log"

@using System.Threading;
@using EtkBlazorApp.BL.Data;
@attribute [Authorize(Roles = "Administrator")]
@inject ILogStorage database
@inject IUserService usersService

<h3>Журнал событий приложения</h3>
@if (entries == null)
{
    <LoadingSpinner />
}
else
{
    <div class="container-fluid">
        <div class="row my-2">
            <button class="btn btn-success" style="margin-right: 18px;" @onclick="@(async(e) => await ApplyFilter(forced: true))">Обновить фильтр</button>

            <div class="btn-group btn-group-toggle" data-toggle="buttons">
                <label class="btn btn-primary @(filterMaxDays == 0 ? "active" : string.Empty)" @onclick="@(e => filterMaxDays = 0)">
                    <input type="radio" name="options" id="option_all" autocomplete="off"> Все
                </label>
                <label class="btn btn-primary @(filterMaxDays == 31 ? "active" : string.Empty)" @onclick="@(e => filterMaxDays = 31)">
                    <input type="radio" name="options" id="option_month" autocomplete="off"> За месяц
                </label>
                <label class="btn btn-primary @(filterMaxDays == 7 ? "active" : string.Empty)" @onclick="@(e => filterMaxDays = 7)">
                    <input type="radio" name="options" id="option_week" autocomplete="off"> За неделю
                </label>

                @for (int d = 7; d >= 1; d--)
                {
                    int local = -d;
                    <label class="btn btn-primary btn-sm @(filterMaxDays == local ? "active" : string.Empty)" @onclick="@(e => filterMaxDays = local)">
                        <input type="radio" name="options" id="option_day_of_week_ago_@local" autocomplete="off">
                        @DateTime.Now.AddDays(local).ToString("ddd")
                        <br />
                        @DateTime.Now.AddDays(local).ToString("dd")
                    </label>
                }

                <label class="btn btn-primary @(filterMaxDays == 1 ? "active" : string.Empty)" @onclick="@(e => filterMaxDays = 1)">
                    <input type="radio" name="options" id="option_day" autocomplete="off"> За сегодня
                </label>
            </div>
        </div>

        <div class="row my-5">
            <div class="col-md-3">
                <label for="filter-user">Пользователь</label>
                <select name="filter-user" class="form-control" @onchange="@(e => selectedUser = e.Value.ToString())">
                    <option value="">Все</option>
                    @foreach (var user in users)
                    {
                        <option value="@user" selected="@(selectedUser == user)">@user</option>
                    }
                </select>
            </div>
            <div class="col-md-3">
                <label for="filter-group-name">Категория</label>
                <select name="filter-group-name" class="form-control" @onchange="SelectedGroupFilterChanged">
                    <option value="">Все</option>
                    @foreach (var group in (LogEntryGroupName[])Enum.GetValues(typeof(LogEntryGroupName)))
                    {
                        <option selected="@(selectedGroup == group)" value="@group">@group.GetDescriptionAttribute()</option>
                    }
                </select>
            </div>
        </div>

        <table class="table table-striped log-table">
            <thead class="thead-etk">
                <tr>
                    <th>Дата|Время</th>
                    <th>Пользователь</th>
                    <th>Группа</th>
                    <th>Заголовок</th>
                    <th>Описание</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in entries)
                {
                    <tr class="@(IsNewEvent(item) ? "new-log-item-blink" : "")">
                        <td>@item.date_time.ToString("G")</td>
                        <td>@item.user</td>
                        <td>@item.group_name</td>
                        <td>@item.title</td>
                        <td>@item.message</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    const int MAX_ITEMS = 100;

    private System.Timers.Timer _timer;

    int filterMaxDays = 0;
    string selectedUser = null;
    LogEntryGroupName? selectedGroup = null;
    List<LogEntryEntity> entries = new();
    List<int> newItemsToHighlight = new();
    List<string> users = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        var usersList = (await usersService.GetUsers()).Select(u => u.login).ToList();
        usersList.Insert(0, "System");
        users = usersList;
        await ApplyFilter(forced: true);

        _timer = new();
        _timer.Interval = 3000;
        _timer.Elapsed += async (o, e) =>
        {
            await ApplyFilter(forced: false);
        };
        _timer.Enabled = true;
    }


    private async Task ApplyFilter(bool forced = true)
    {
        bool hasChanges = forced;
        newItemsToHighlight.Clear();

        var oldEntries = entries;
        var newEntries = await database.GetLogItems(MAX_ITEMS, filterMaxDays, selectedUser, selectedGroup?.GetDescriptionAttribute());
        if (forced)
        {
            entries = newEntries;
        }
        else
        {
            if ((oldEntries?.Count ?? 0) > 0 && (newEntries?.Count > 0) && (oldEntries[0].id != newEntries[0].id))
            {
                entries = newEntries;
                newItemsToHighlight.AddRange(newEntries.Select(i => i.id).Except(oldEntries.Select(i => i.id)));
                hasChanges = true;
            }
        }

        if(hasChanges)
        {
            InvokeAsync(StateHasChanged);
        }
    }

    private bool IsNewEvent(LogEntryEntity item)
    {
        if(item == null || item.id == 0){
            return false;
        }
        return newItemsToHighlight.Contains(item.id);
    }

    private void SelectedGroupFilterChanged(ChangeEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(e.Value.ToString()))
        {
            selectedGroup = null;
        }
        else
        {
            selectedGroup = Enum.Parse<LogEntryGroupName>(e.Value.ToString());
        }
    }

    public void Dispose()
    {
        _timer?.Stop();
        _timer?.Dispose();       
    }
}
